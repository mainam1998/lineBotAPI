import Head from 'next/head';
import { useState, useEffect, useMemo } from 'react';
import styles from '../styles/Home.module.css';

export default function Home() {
  const [testResults, setTestResults] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [files, setFiles] = useState([]);
  const [dashboardLoading, setDashboardLoading] = useState(false);
  const [dashboardError, setDashboardError] = useState(null);
  const [dashboardWarning, setDashboardWarning] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [searchCategory, setSearchCategory] = useState('all');
  const [queueStatus, setQueueStatus] = useState(null);

  const runTest = async (endpoint) => {
    setIsLoading(true);
    setError(null);
    setTestResults(null); // ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏Å‡πà‡∏≤
    try {
      const response = await fetch(`/api/${endpoint}`);
      const data = await response.json();
      setTestResults(data);
    } catch (err) {
      setError(err.message);
      setTestResults(null);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchFiles = async () => {
    setDashboardLoading(true);
    setDashboardError(null);
    try {
      const response = await fetch('/api/dashboard');
      const data = await response.json();
      if (data.status === 'ok' || data.status === 'warning') {
        setFiles(data.files);

        if (data.status === 'warning') {
          setDashboardWarning(data.message);
        } else {
          setDashboardWarning(null);
        }
      } else {
        setDashboardError(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå');
      }
    } catch (err) {
      setDashboardError(err.message);
    } finally {
      setDashboardLoading(false);
    }
  };

  const fetchQueueStatus = async () => {
    try {
      const response = await fetch('/api/queue-status');
      const data = await response.json();
      if (data.status === 'ok') {
        setQueueStatus(data.data);
      }
    } catch (err) {
      console.error('Error fetching queue status:', err);
    }
  };

  useEffect(() => {
    fetchFiles();
    fetchQueueStatus();
    // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
    const interval = setInterval(() => {
      fetchFiles();
      fetchQueueStatus();
    }, 60000);
    return () => clearInterval(interval);
  }, []);
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
  const getTypeColor = (mimeType) => {
    const type = mimeType.split('/')[0];
    const subtype = mimeType.split('/')[1];

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å
    switch (type) {
      case 'image':
        return '#4285F4'; // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
      case 'video':
        return '#EA4335'; // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
      case 'audio':
        return '#FBBC05'; // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
      case 'application':
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢
        if (subtype.includes('pdf')) {
          return '#FF5722'; // ‡∏™‡∏µ‡∏™‡πâ‡∏°‡πÅ‡∏î‡∏á
        } else if (subtype.includes('word') || subtype.includes('document')) {
          return '#4285F4'; // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
        } else if (subtype.includes('sheet') || subtype.includes('excel')) {
          return '#0F9D58'; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        } else if (subtype.includes('presentation') || subtype.includes('powerpoint')) {
          return '#FF9800'; // ‡∏™‡∏µ‡∏™‡πâ‡∏°
        } else if (subtype.includes('zip') || subtype.includes('compressed')) {
          return '#795548'; // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•
        }
        return '#607D8B'; // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö application ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      case 'text':
        return '#0F9D58'; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
      default:
        return '#9E9E9E'; // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  const getFileExtension = (fileName, mimeType) => {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
    if (fileName && fileName.includes('.')) {
      const extension = fileName.split('.').pop();
      // ‡∏ñ‡πâ‡∏≤‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      if (extension.length <= 4) {
        return extension;
      }
      // ‡∏ñ‡πâ‡∏≤‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 4 ‡∏ï‡∏±‡∏ß
      return extension.substring(0, 4);
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ MIME type ‡πÅ‡∏ó‡∏ô
    const type = mimeType.split('/').pop();
    return type.substring(0, 4);
  };

  // ‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const filteredFiles = useMemo(() => {
    if (!searchTerm) return files;

    return files.filter(file => {
      const searchLower = searchTerm.toLowerCase();

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      if (searchCategory === 'name') {
        return file.name.toLowerCase().includes(searchLower);
      } else if (searchCategory === 'type') {
        return file.mimeType.toLowerCase().includes(searchLower);
      } else if (searchCategory === 'size') {
        return file.size.toLowerCase().includes(searchLower);
      } else if (searchCategory === 'date') {
        return file.createdTime.toLowerCase().includes(searchLower);
      } else {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        return (
          file.name.toLowerCase().includes(searchLower) ||
          file.mimeType.toLowerCase().includes(searchLower) ||
          file.size.toLowerCase().includes(searchLower) ||
          file.createdTime.toLowerCase().includes(searchLower)
        );
      }
    });
  }, [files, searchTerm, searchCategory]);

  return (
    <>
      <Head>
        <title>LINE File Bot</title>
        <meta name="description" content="LINE Bot for uploading files to Google Drive" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <div className={styles.container}>
        <main className={styles.main}>
          {/* Header Section */}
          <div className={styles.header}>
            <h1 className={styles.title}>LINE File Bot</h1>
            <p className={styles.subtitle}>
              ‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å LINE ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            </p>
          </div>

          {/* System Status Card */}
          <div className={styles.card}>
            <div className={styles.cardHeader}>
              <h2 className={styles.cardTitle}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö</h2>
              {queueStatus && (
                <div className={styles.queueStatusTopRight}>
                  <span className={styles.queueTopIcon}>üìã</span>
                  <span className={styles.queueTopStat}>
                    ‚è≥‡∏£‡∏≠ {queueStatus.stats.pending}
                  </span>
                  <span className={styles.queueTopStat}>
                    üîÑ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô {queueStatus.stats.processing}
                  </span>
                  <span className={styles.queueTopStat}>
                    ‚úÖ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {queueStatus.stats.completed}
                  </span>
                  {queueStatus.stats.failed > 0 && (
                    <span className={styles.queueTopStat}>
                      ‚ùå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß {queueStatus.stats.failed}
                    </span>
                  )}
                  <span className={styles.queueTopTotal}>
                    ‡∏£‡∏ß‡∏° {queueStatus.stats.total} ‡πÑ‡∏ü‡∏•‡πå
                  </span>
                </div>
              )}
            </div>
            <div className={styles.statusContent}>
              <div className={styles.statusInfo}>
                <p>
                  Webhook URL: <code>/api/callback</code>
                </p>
                <p className={styles.statusIndicator}>
                  <span className={styles.statusDot}></span>
                  ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß
                </p>
              </div>
              <div>
                <button
                  className={styles.refreshButton}
                  onClick={() => {
                    fetchFiles();
                    fetchQueueStatus();
                  }}
                >
                  üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
                </button>
              </div>
            </div>
          </div>

          {/* Files List Card */}
          <div className={styles.card}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>
              <h2 className={styles.cardTitle}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î</h2>
            </div>

            {/* Search Section */}
            <div className={styles.searchContainer}>
              <div className={styles.searchInput}>
                <input
                  type="text"
                  placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
                {searchTerm && (
                  <button
                    className={styles.clearButton}
                    onClick={() => setSearchTerm('')}
                  >
                    ‚úï
                  </button>
                )}
              </div>
              <select
                className={styles.searchSelect}
                value={searchCategory}
                onChange={(e) => setSearchCategory(e.target.value)}
              >
                <option value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                <option value="name">‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå</option>
                <option value="type">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
                <option value="size">‡∏Ç‡∏ô‡∏≤‡∏î</option>
                <option value="date">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î</option>
              </select>
            </div>

            {/* Loading State */}
            {dashboardLoading && (
              <div className={styles.loading}>
                <div className={styles.loadingSpinner}></div>
                <p className={styles.loadingText}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
              </div>
            )}

            {/* Error State */}
            {dashboardError && (
              <div className={`${styles.alert} ${styles.alertError}`}>
                <span className={styles.alertIcon}>‚ö†Ô∏è</span>
                <div className={styles.alertContent}>
                  <h4>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h4>
                  <p>{dashboardError}</p>
                </div>
              </div>
            )}

            {/* Empty State */}
            {!dashboardLoading && !dashboardError && files.length === 0 && (
              <div className={styles.emptyState}>
                <div className={styles.emptyIcon}>üìÅ</div>
                <p className={styles.emptyTitle}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå</p>
                <p className={styles.emptySubtitle}>
                  ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ú‡πà‡∏≤‡∏ô LINE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive
                </p>
              </div>
            )}

            {/* Files Table */}
            {!dashboardLoading && !dashboardError && files.length > 0 && (
              <div className={styles.tableWrapper}>
                <div className={styles.tableContainer}>
                  <table className={styles.table}>
                    <thead className={styles.tableHeader}>
                      <tr>
                        <th className={styles.tableHeaderCell}>‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå</th>
                        <th className={styles.tableHeaderCell}>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                        <th className={styles.tableHeaderCell}>‡∏Ç‡∏ô‡∏≤‡∏î</th>
                        <th className={styles.tableHeaderCell}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î</th>
                        <th className={styles.tableHeaderCell}>‡∏•‡∏¥‡∏á‡∏Å‡πå</th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredFiles.length > 0 ? (
                        filteredFiles.map((file) => (
                          <tr key={file.id} className={styles.tableRow}>
                            <td className={styles.tableCellFileName}>{file.name}</td>
                            <td className={styles.tableCell}>
                              <span
                                className={styles.fileTypeTag}
                                style={{ backgroundColor: getTypeColor(file.mimeType) }}
                              >
                                {getFileExtension(file.name, file.mimeType)}
                              </span>
                            </td>
                            <td className={styles.tableCell}>{file.size}</td>
                            <td className={styles.tableCell}>{file.createdTime}</td>
                            <td className={styles.tableCell}>
                              {file.webViewLink ? (
                                <a
                                  href={file.webViewLink}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className={styles.fileLink}
                                >
                                  ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå
                                </a>
                              ) : (
                                <span className={styles.noLink}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå</span>
                              )}
                            </td>
                          </tr>
                        ))
                      ) : (
                        <tr>
                          <td colSpan="5" className={styles.emptyRow}>
                            ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                          </td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
                <div className={styles.stats}>
                  <span>‡πÅ‡∏™‡∏î‡∏á {filteredFiles.length} ‡∏à‡∏≤‡∏Å {files.length} ‡πÑ‡∏ü‡∏•‡πå</span>
                  {searchTerm && (
                    <button
                      className={styles.clearSearchButton}
                      onClick={() => setSearchTerm('')}
                    >
                      ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                    </button>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* System Testing Card */}
          <div className={styles.card}>
            <h2 className={styles.cardTitle}>‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö</h2>

            <div className={styles.buttonGroup}>
              <button
                className={styles.button}
                onClick={() => runTest('test')}
              >
                <span>‚öôÔ∏è</span> ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API
              </button>

              <button
                className={styles.button}
                onClick={() => runTest('line-test')}
              >
                <span>üí¨</span> ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE API
              </button>

              <button
                className={styles.button}
                onClick={() => runTest('debug-env')}
              >
                <span>üîç</span> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables
              </button>

              <button
                className={styles.button}
                onClick={() => runTest('test-drive-simple')}
              >
                <span>üìÇ</span> ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Google Drive API
              </button>

              <button
                className={styles.button}
                onClick={() => runTest('queue-status')}
              >
                <span>üìã</span> ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Queue System
              </button>

              <button
                className={styles.button}
                onClick={() => runTest('debug-queue')}
              >
                <span>üîç</span> Debug Queue
              </button>
            </div>

            {/* Testing Loading State */}
            {isLoading && (
              <div className={styles.loading}>
                <div className={styles.loadingSpinner}></div>
                <p className={styles.loadingText}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...</p>
              </div>
            )}

            {/* Testing Results - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà loading */}
            {!isLoading && testResults && (
              <div className={`${styles.alert} ${
                testResults.status === 'ok' || testResults.success === true
                  ? styles.alertSuccess
                  : styles.alertError
              }`}>
                <span className={styles.alertIcon}>
                  {testResults.status === 'ok' || testResults.success === true ? '‚úÖ' : '‚ùå'}
                </span>
                <div className={styles.alertContent}>
                  <h4>
                    {testResults.status === 'ok' || testResults.success === true
                      ? '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô'
                      : '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'
                    }
                  </h4>
                  <p>{testResults.message || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'}</p>

                  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
                  {testResults.details && (
                    <div style={{ marginTop: '12px' }}>
                      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ */}
                      {testResults.details.suggestions && testResults.details.suggestions.length > 0 && (
                        <div style={{ marginBottom: '8px' }}>
                          <strong>üí° ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞:</strong>
                          <ul style={{ margin: '4px 0', paddingLeft: '20px' }}>
                            {testResults.details.suggestions.map((suggestion, index) => (
                              <li key={index} style={{ fontSize: '0.9rem' }}>{suggestion}</li>
                            ))}
                          </ul>
                        </div>
                      )}

                      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå */}
                      {testResults.details.files && testResults.details.files.length > 0 && (
                        <div style={{ marginBottom: '8px' }}>
                          <strong>üìÅ ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:</strong>
                          <ul style={{ margin: '4px 0', paddingLeft: '20px' }}>
                            {testResults.details.files.slice(0, 5).map((file, index) => (
                              <li key={index} style={{ fontSize: '0.9rem' }}>
                                {file.name} ({file.size})
                              </li>
                            ))}
                            {testResults.details.files.length > 5 && (
                              <li style={{ fontSize: '0.9rem', fontStyle: 'italic' }}>
                                ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {testResults.details.files.length - 5} ‡πÑ‡∏ü‡∏•‡πå...
                              </li>
                            )}
                          </ul>
                        </div>
                      )}

                      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ */}
                      {testResults.details.serviceAccount && (
                        <div style={{ fontSize: '0.85rem', color: '#666', marginTop: '8px' }}>
                          <strong>üîß ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ:</strong><br/>
                          Service Account: {testResults.details.serviceAccount}<br/>
                          {testResults.details.folderId && (
                            <>Folder ID: {testResults.details.folderId}<br/></>
                          )}
                          {testResults.details.folderUrl && (
                            <>
                              <a href={testResults.details.folderUrl} target="_blank" rel="noopener noreferrer">
                                üîó ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Google Drive
                              </a>
                            </>
                          )}
                        </div>
                      )}
                    </div>
                  )}

                  {/* ‡πÅ‡∏™‡∏î‡∏á JSON data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ */}
                  {testResults.data && !testResults.details && (
                    <pre style={{ marginTop: '8px', fontSize: '0.85rem', color: '#666' }}>
                      {JSON.stringify(testResults.data, null, 2)}
                    </pre>
                  )}
                </div>
              </div>
            )}

            {/* Testing Error State - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ error ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà loading */}
            {!isLoading && error && !testResults && (
              <div className={`${styles.alert} ${styles.alertError}`}>
                <span className={styles.alertIcon}>‚ùå</span>
                <div className={styles.alertContent}>
                  <h4>‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß</h4>
                  <p>{error}</p>
                </div>
              </div>
            )}
          </div>
        </main>
      </div>
    </>



  );
}
